import { ComboBox, LineEdit, VerticalBox, Button, SpinBox } from "std-widgets.slint";
import { MyComboBox } from "../common.slint";
import { IconButton } from "../widgets/icon_button.slint";
import { TextButton } from "../widgets/text_button.slint";
import { Icons, FontSettings, TodoPalette, SpaceSettings } from "../widgets/styling.slint";
import { FrequencyPresetSlintStruct } from "../views/create_frequency_preset_view.slint";
import { PowerPresetSlintStruct } from "../views/create_power_preset_view.slint";
import { CreateFrequencyPresetAdapter } from "create_frequency_preset_view.slint";

// @rust-attr(derive(serde::Serialize, serde::Deserialize))
// export struct MissionSlintStruct {
//     mission_name: string,
//     mission_desc: string,
//     mission_details: string,
//     checked: bool,
//     power_model: PowerPresetSlintStruct,
//     frequency_model: FrequencyPresetSlintStruct
// }
// import { PowerPresetSlintStruct } from "../views/create_power_preset_view.slint";
// import { FrequencyPresetSlintStruct } from "../views/create_frequency_preset_view.slint";

@rust-attr(derive(serde::Serialize, serde::Deserialize))
export struct MissionSlintStruct {
    mission_name: string,
    mission_id: int,
    mission_desc: string,
    mission_details: string,
    // power_preset: string,
    power_model: PowerPresetSlintStruct,
    // frequency_preset: string,
    frequency_model: FrequencyPresetSlintStruct,
    checked: bool,
}


export global CreateMissionAdapter {
    in-out property <int> index;
    in-out property <string> mode: "Create";
    in-out property <MissionSlintStruct> mission;

    // callback create(
    //     /* mission-name */ string, 
    //     /* mission-id */ int,
    //     /* mission-desc */ string, 
    //     /* frequency-preset */ FrequencyPresetSlintStruct,
    //     /* power-preset */ PowerPresetSlintStruct
    //     );
    // callback update(
    //     /* index */ int, 
    //     /* mission-name */ string, 
    //     /* mission-desc */ string, 
    //     /* mission-id */ int, 
    //     /* frequency-preset */ FrequencyPresetSlintStruct,
    //     /* power-preset */ PowerPresetSlintStruct
    //     );
    callback create(
        /* mission*/ MissionSlintStruct
        );
    callback update(
        /* index */ int, 
        /* mission*/ MissionSlintStruct
        );
    callback back();
    pure callback next-mission-id() -> int;
    pure callback validate_mission-id(int) -> int;

    // dummy implementation for live preview
    next-mission-id() => {
      9
    }

}

export component CreateMissionView {
    VerticalBox {
        padding: 10px;
        alignment: start;
         HorizontalLayout {
            IconButton {
                icon: Icons.close;
                accessible-label: @tr("Cancel New Mission Creation");

                clicked => {
                    root.reset();
                    CreateMissionAdapter.back();
                }
            }

            // spacer
            Rectangle { }


            Button {
                text: @tr("Create");
                enabled: mission-name-input.text != "";
                primary: true;

                clicked => {
                    root.create();
                }
            }
        }

        VerticalLayout {
            spacing: SpaceSettings.default-spacing;

            mission-name-label := Text {
                text: @tr("Mission name");
                color: TodoPalette.foreground;
                font-size: FontSettings.body-strong.font-size;
                font-weight: FontSettings.body-strong.font-weight;
                horizontal-alignment: left;
                overflow: elide;
            }
            Rectangle { } // spacer
            mission-name-input := LineEdit {
                placeholder-text: @tr("Mission Name (alphanumber, underscore, hyphen)");
                accessible-label: mission-name-label.text;
            }

            mission-id-label := Text {
                text: @tr("Mission id");
                color: TodoPalette.foreground;
                font-size: FontSettings.body-strong.font-size;
                font-weight: FontSettings.body-strong.font-weight;
                horizontal-alignment: left;
                overflow: elide;
            }
            Rectangle { } // spacer
            mission-id-input := SpinBox {
                minimum: 1;
                maximum: 99;
                accessible-label: mission-id-label.text;
            }

            mission-desc-label := Text {
                text: @tr("Mission Description");
                color: TodoPalette.foreground;
                font-size: FontSettings.body-strong.font-size;
                font-weight: FontSettings.body-strong.font-weight;
                horizontal-alignment: left;
                overflow: elide;
            }
            Rectangle { } // spacer
            mission-desc-input := LineEdit {
                placeholder-text: @tr("Mission Description");
                accessible-label: mission-desc-label.text;
            }

            frequency-preset-label := Text {
                text: @tr("Frequency Preset");
                color: TodoPalette.foreground;
                font-size: FontSettings.body-strong.font-size;
                font-weight: FontSettings.body-strong.font-weight;
                horizontal-alignment: left;
                overflow: elide;
            }
            Rectangle { } // spacer
            frequency-preset-input := ComboBox {
                current-value: "default";
                model: [@tr("default"), @tr("band-a"), @tr("band-b")];
            }
        

            power-preset-label := Text {
                text: @tr("Power Preset");
                color: TodoPalette.foreground;
                font-size: FontSettings.body-strong.font-size;
                font-weight: FontSettings.body-strong.font-weight;
                horizontal-alignment: left;
                overflow: elide;
            }
            Rectangle { } // spacer
            power-preset-input := ComboBox {
                current-value: @tr("low");
                model: [@tr("Nominal"), @tr("HighAssurance"), @tr("Secret")];
            }
        

            Rectangle { }
        }
    }

    function reset() {
        mission-name-input.text = "";
        mission-desc-input.text = "";
        mission-id-input.value = 0;
    }

    function update() {
        CreateMissionAdapter.back();
        CreateMissionAdapter.update(
            CreateMissionAdapter.index,
            CreateMissionAdapter.mission
            // mission-name-input.text, 
            // mission-id-input.value,  
            // mission-desc-input.text, 
            // CreateMissionAdapter.frequency-preset,
            // CreateMissionAdapter.power-preset,
        );
        root.reset();
    }
    function create() {
        CreateMissionAdapter.back();
        CreateMissionAdapter.create(
            CreateMissionAdapter.mission
            // mission-name-input.text, 
            // mission-id-input.value,  
            // mission-desc-input.text, 
            // CreateMissionAdapter.frequency-preset,
            // CreateMissionAdapter.power-preset,
        );
        root.reset();
    }
}
